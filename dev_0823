import pandas as pd
from langgraph.graph import StateGraph
from langchain_core.messages import AIMessage, HumanMessage, SystemMessage
from langchain_core.language_models import BaseChatModel
from langgraph.checkpoint.sqlite import SqliteSaver
from langchain_google_genai import ChatGoogleGenerativeAI
from typing import List, TypedDict
from openpyxl.utils import get_column_letter
from openpyxl.styles import Alignment
import re

# 定義狀態字典類型，用於保存每個客戶的狀態信息
class CustomerState(TypedDict):
    news_content: str  # 輸入的新聞內容
    customer_features: List[str]  # 客戶特徵列表
    extracted_features: str  # 提取的客戶特徵摘要
    news_summary: str  # 基於客戶特徵的新聞摘要
    investment_advice_result: str  # 生成的投資建議
    impact_score: int  # 新增的影響程度分數

# 定義個性化新聞代理類
class PersonalizedNewsAgent:

    def __init__(self, model: BaseChatModel, checkpointer: SqliteSaver):
        self.model = model  # 初始化生成式語言模型
        self.checkpointer = checkpointer  # 初始化檢查點保存器，用於保存狀態
        builder = StateGraph(CustomerState)  # 創建StateGraph並傳入狀態字典類型
        builder.add_node("initialize", self.initialize_node)
        builder.add_node("extract_customer_features", self.extract_customer_features_node)
        builder.add_node("personalized_news_summary", self.personalized_news_summary_node)
        builder.add_node("investment_advice", self.investment_advice_node)
        builder.add_node("impact_assessment", self.impact_assessment_node)  # 新增影響評估節點
        builder.add_node("output_results", self.output_results_node)

        builder.set_entry_point("initialize")
        builder.add_edge("initialize", "extract_customer_features")
        builder.add_edge("extract_customer_features", "personalized_news_summary")
        builder.add_edge("personalized_news_summary", "investment_advice")
        builder.add_edge("investment_advice", "impact_assessment")  # 添加新的邊
        builder.add_edge("impact_assessment", "output_results")
        self.graph = builder.compile(checkpointer=checkpointer)

    def initialize_node(self, state: CustomerState):
        return {
            "extracted_features": "",
            "news_summary": "",
            "investment_advice_result": "",
            "impact_score": 50,  # 初始化影響程度分數為 50（中等）
        }

    def extract_customer_features_node(self, state: CustomerState):
        customer_features_text = "\n".join(state["customer_features"])
        messages = [
            SystemMessage(content="請提取客戶特徵摘要。請確保摘要內容完全來自以下客戶特徵信息，不參考其他來源。"),
            HumanMessage(content=customer_features_text),
        ]
        response = self.model.invoke(messages)
        state["extracted_features"] = response.content.strip()
        return {"extracted_features": state["extracted_features"]}

    def personalized_news_summary_node(self, state: CustomerState):
        messages = [
            SystemMessage(content="請根據以下新聞內容生成200字以內的摘要，不要包括任何客戶特徵信息，只聚焦新聞本身。"),
            HumanMessage(content=state["news_content"])
        ]
        response = self.model.invoke(messages)
        state["news_summary"] = response.content.strip()
        return {"news_summary": state["news_summary"]}

    def investment_advice_node(self, state: CustomerState):
        messages = [
            SystemMessage(content="根據以下客戶特徵和新聞摘要，生成一個詳細的投資建議，直接給出具體的建議，大約200字內："),
            AIMessage(content=f"客戶特徵: {state['extracted_features']}"),
            AIMessage(content=f"新聞摘要: {state['news_summary']}"),
        ]
        response = self.model.invoke(messages)
        state["investment_advice_result"] = response.content.strip()
        return {"investment_advice_result": state["investment_advice_result"]}

    def impact_assessment_node(self, state: CustomerState):
        messages = [
        SystemMessage(content="根據以下客戶特徵和新聞摘要，評估此新聞對這個投資人的影響程度。請給出0到100分的評分，並用兩句話內解釋。"),
        AIMessage(content=f"客戶特徵: {state['extracted_features']}"),
        AIMessage(content=f"新聞摘要: {state['news_summary']}"),
    ]
        response = self.model.invoke(messages)
        impact_text = response.content.strip()

    # 初始化默认值
        score = 20
        explanation = "影響甚小，先給予20分"

    # 检查是否模型返回了完整的提示而不是结果
        if "0到100分的評分" not in impact_text:
        # 使用正则表达式提取数字评分
            score_match = re.search(r'\b(\d{1,3})\b', impact_text)
            if score_match:
                score = int(score_match.group(1))
            # 保证分数在0到100之间
                score = min(max(score, 0), 100)
                explanation = impact_text[impact_text.find(score_match.group(1)) + len(score_match.group(1)):].strip()
                explanation = explanation.replace('*', '').strip()  # 移除可能的米字號或其他不必要符号
            else:
            # 如果没有提取到有效分数，使用默认值并生成解释
                score = 20
                explanation = "影響甚小，先給予20分"

    # 构建影响评分结果，确保没有多余的分数后缀
        state["impact_score"] = f"{score} 分" if explanation else f"{score} 分 - {explanation}"
        return {"impact_score": state["impact_score"]}

    def output_results_node(self, state: CustomerState):
        return {
            "extracted_features": state["extracted_features"],
            "news_summary": state["news_summary"],
            "investment_advice_result": state["investment_advice_result"],
            "impact_score": state["impact_score"],  # 包含影響程度分數
        }

# 定義格式化輸出結果的函數
def format_output_for_customer(customer_name, extracted_features, news_summary, investment_advice_result, impact_score):
    return (f"客戶名稱: {customer_name}\n"
            f"提取的客戶特徵:\n{extracted_features}\n\n"
            f"新聞摘要:\n{news_summary}\n\n"
            f"投資建議:\n{investment_advice_result}\n\n"
            f"新聞對客戶的影響程度: {impact_score} 分\n")

# 初始化模型和檢查點保存器
model = ChatGoogleGenerativeAI(model="gemini-1.5-pro")
memory = SqliteSaver.from_conn_string(":memory:")

bot = PersonalizedNewsAgent(model=model, checkpointer=memory)

thread = {"configurable": {"thread_id": "1"}}

# 讀取Excel表格
df = pd.read_excel("teste.xlsx")

# 定義輸入的新聞內容
state = {
    "news_content": """7/31日本央行決定將基準利率調升15個基點，從
0%~0.10%升至0.15%-0.25%，並計劃每季減少
購債約4,000億日圓，升息令套利交易平倉賣壓出
籠，輔以美國7月非農數據驟降至11.4萬人與7月
ISM製造業數據低於預期，避險情緒推升美元兌日
圓8/5盤中一度跌破145大關。

在日本央行升息後，日本公債殖利率上升、推升
日圓升值，帶動亞洲多數幣別月迄今皆升值。短
線在科技股回檔及中東情勢升溫下，避險情緒主
導料將令日圓短線持續偏強勢。

07/31 BOJ升息15個Bp至0.25%，展現朝向貨幣政
策正常化的決心。同時宣布開啟量化緊縮，加上投
資人對於美國經濟衰退擔憂再起，風險意識升高。
導致日股急跌，原本強勢的金融類股也面臨補跌，
日經指數創半年新低。

升息導致日圓急升後，外銷類股面臨沉重賣壓，
同時外資撒資日股，數據顯示，截至7月26日當周，
外資淨賣出6,705億日圓的日本股票。

美國7月新增非農就業遠差於預期，失業率升至4.3
％，數據觸發「薩姆法則」預告的經濟衰退，市場
恐慌情緒蔓延。台股5日殺聲震天，終場大跌1807
點，為史上最大跌點，收19830.88點，跌幅8.35
％，成交量6407.93億元。

股價提前反應基本面，第2季股價大漲者基本面佳，
財報反應利多鈍化，展望樂觀仍難抵龐大獲利賣壓，
台積電*(2330)法說會後股價回檔，受到美國政治
與政策不確定因素干擾，亞股當中漲幅較高的日股
及台股面臨獲利調節賣壓。

8/5台股出現全面性殺盤，恐慌情緒濃厚，類股方面主要以先前漲多的營造、電子股跌幅較重，重點權值-台積電、鴻海、聯發科、廣達*跌幅都超過9%以上。Nvidia*Blackwell量產可能延期，疊加經濟衰退風險，重創今年漲高的電子族群。

由於美國經濟與通膨明顯降溫，聯準會9月降息勢在必行，利多美債與高評級債券。另一方面，考量投資信心薄弱，股市下方風險仍高，衛星宜加碼醫療與公用事業等防禦類股。同時也建議加碼黃金、增持現金以控制投資組合波動度，降低投資風險。"""
}

# 生成客戶特徵
all_customers_output = []
all_customers_data = []

# 你可以選擇指定要使用的欄位名稱
selected_columns = [
    '近一年總成交量', '股票類型交易量', '債券類型交易量', '平衡類型交易量', '股票類型交易量佔比', '債券類型交易量佔比', '平衡類型交易量佔比'
                    ,'近一年總成交次數','股票類型交易次數','債券類型交易次數','平衡類型交易次數','股票類型交易次數佔比','債券類型交易次數佔比'
                    ,'平衡類型交易次數佔比','庫存量','股票類型庫存量','債券類型庫存量','平衡類型庫存量','股票類型庫存量佔比','債券類型庫存量佔比'
                    ,'平衡類型庫存量佔比','RR1佔比','RR2佔比','RR3佔比','RR4佔比','RR5佔比','近一年REITs的總成交量','近一年大中華股票的總成交量'
                    ,'近一年中國股票的總成交量','近一年巴西股票的總成交量','近一年日本中小型股票的總成交量','近一年日本股票的總成交量'
                    ,'近一年台灣股票的總成交量','近一年全球平衡的總成交量','近一年全球股票的總成交量','近一年全球債的總成交量','近一年印度股票的總成交量'
                    ,'近一年亞太股票的總成交量','近一年亞太區(除日本)股票的總成交量','近一年亞太區股票的總成交量','近一年亞太區貨幣債的總成交量'
                    ,'近一年拉美股票的總成交量','近一年東南亞股票的總成交量','近一年金融股票 的總成交量','近一年南韓股票的總成交量'
                    ,'近一年科技股票的總成交量','近一年美元高息/高收益債券的總成交量','近一年美國股票的總成交量','近一年美債的總成交量'
                    ,'近一年英國股票的總成交量','近一年香港股票的總成交量','RR5佔比','近一年高收益債的總成交量','近一年貨幣型的總成交量'
                    ,'近一年黃金的總成交量','近一年新興市場股票的總成交量','近一年新興市場債的總成交量','近一年新興歐洲股票的總成交量'
                    ,'近一年德國股票的總成交量','近一年歐洲中小型股票的總成交量','近一年歐洲股票的總成交量','近一年歐洲新興市場股票的總成交量'
                    ,'近一年環球股票的總成交量','近一年環球高息/高收益債券的總成交量','近一年環球債券的總成交量','近一年環球新市債的總成交量'
                    ,'近一年環球新興市場股票的總成交量','近一年環球新興市場強勢貨幣債券的總成交量','近一年醫療生技的總成交量'
                    ,'近一年醫療保健股票的總成交量','近一年礦業股票的總成交量','近一年REITs的總成交量佔比','近一年大中華股票的總成交量佔比'
                    ,'近一年中國股票的總成交量佔比','近一年巴西股票的總成交量佔比','近一年日本中小型股票的總成交量佔比'
                    ,'近一年日本股票的總成交量佔比','近一年台灣股票的總成交量佔比','近一年全球平衡的總成交量佔比','近一年全球股票的總成交量佔比'
                    ,'近一年全球債的總成交量佔比','近一年印度股票的總成交量佔比','近一年亞太股票的總成交量佔比','近一年亞太區(除日本)股票的總成交量佔比'
                    ,'近一年亞太區股票的總成交量佔比','近一年亞太區貨幣債的總成交量佔比','近一年拉美股票的總成交量佔比','近一年東南亞股票的總成交量佔比'
                    ,'近一年金融股票 的總成交量佔比','近一年南韓股票的總成交量佔比','近一年科技股票的總成交量佔比','近一年美元高息/高收益債券的總成交量佔比'
                    ,'近一年美國股票的總成交量佔比','近一年美債的總成交量佔比','近一年英國股票的總成交量佔比','近一年香港股票的總成交量佔比'
                    ,'近一年能源股票 的總成交量佔比','近一年高收益債的總成交量佔比','近一年貨幣型的總成交量佔比','近一年黃金的總成交量佔比'
                    ,'近一年新興市場股票的總成交量佔比','近一年新興市場債的總成交量佔比','近一年新興歐洲股票的總成交量佔比','近一年德國股票的總成交量佔比'
                    ,'近一年歐洲中小型股票的總成交量佔比','近一年歐洲股票的總成交量佔比','近一年歐洲新興市場股票的總成交量佔比','近一年環球股票的總成交量佔比'
                    ,'近一年環球高息/高收益債券的總成交量佔比','近一年環球債券的總成交量佔比','近一年環球新市債的總成交量佔比'
                    ,'近一年環球新興市場股票的總成交量佔比','近一年環球新興市場強勢貨幣債券的總成交量佔比','近一年醫療生技的總成交量佔比'
                    ,'近一年醫療保健股票的總成交量佔比','近一年礦業股票的總成交量佔比','近一年REITs的總成交次數','近一年大中華股票的總成交次數'
                    ,'近一年中國股票的總成交次數','近一年巴西股票的總成交次數','近一年日本中小型股票的總成交次數','近一年日本股票的總成交次數'
                    ,'近一年台灣股票的總成交次數','近一年全球平衡的總成交次數','近一年全球股票的總成交次數','近一年全球債的總成交次數'
                    ,'近一年印度股票的總成交次數','近一年亞太股票的總成交次數','近一年亞太區(除日本)股票的總成交次數','近一年亞太區股票的總成交次數'
                    ,'近一年亞太區貨幣債的總成交次數','近一年拉美股票的總成交次數','近一年東南亞股票的總成交次數','近一年金融股票 的總成交次數'
                    ,'近一年南韓股票的總成交次數','近一年科技股票的總成交次數','近一年美元高息/高收益債券的總成交次數','近一年美國股票的總成交次數'
                    ,'近一年美債的總成交次數','近一年英國股票的總成交次數','近一年香港股票的總成交次數','近一年能源股票 的總成交次數'
                    ,'近一年高收益債的總成交次數','近一年貨幣型的總成交次數','近一年黃金的總成交次數','近一年新興市場股票的總成交次數'
                    ,'近一年新興市場債的總成交次數','近一年新興歐洲股票的總成交次數','近一年德國股票的總成交次數','近一年歐洲中小型股票的總成交次數'
                    ,'近一年歐洲股票的總成交次數','近一年歐洲新興市場股票的總成交次數','近一年環球股票的總成交次數','近一年環球高息/高收益債券的總成交次數'
                    ,'近一年環球債券的總成交次數','近一年環球新市債的總成交次數','近一年環球新興市場股票的總成交次數','近一年環球新興市場強勢貨幣債券的總成交次數'
                    ,'近一年醫療生技的總成交次數','近一年醫療保健股票的總成交次數','近一年礦業股票的總成交次數','近一年REITs的總成交次數佔比'
                    ,'近一年大中華股票的總成交次數佔比','近一年中國股票的總成交次數佔比','近一年巴西股票的總成交次數佔比','近一年日本中小型股票的總成交次數佔比'
                    ,'近一年日本股票的總成交次數佔比','近一年台灣股票的總成交次數佔比','近一年全球平衡的總成交次數佔比','近一年全球股票的總成交次數佔比'
                    ,'近一年全球債的總成交次數佔比','近一年印度股票的總成交次數佔比','近一年亞太股票的總成交次數佔比','近一年亞太區(除日本)股票的總成交次數佔比'
                    ,'近一年亞太區股票的總成交次數佔比','近一年亞太區貨幣債的總成交次數佔比','近一年拉美股票的總成交次數佔比','近一年東南亞股票的總成交次數佔比'
                    ,'近一年金融股票 的總成交次數佔比','近一年南韓股票的總成交次數佔比','近一年科技股票的總成交次數佔比'
                    ,'近一年美元高息/高收益債券的總成交次數佔比','近一年美國股票的總成交次數佔比','近一年美債的總成交次數佔比'
                    ,'近一年英國股票的總成交次數佔比','近一年香港股票的總成交次數佔比','近一年能源股票 的總成交次數佔比','近一年高收益債的總成交次數佔比'
                    ,'近一年貨幣型的總成交次數佔比','近一年黃金的總成交次數佔比','近一年新興市場股票的總成交次數佔比','近一年新興市場債的總成交次數佔比'
                    ,'近一年新興歐洲股票的總成交次數佔比','近一年德國股票的總成交次數佔比','近一年歐洲中小型股票的總成交次數佔比','近一年歐洲股票的總成交次數佔比'
                    ,'近一年歐洲新興市場股票的總成交次數佔比','近一年環球股票的總成交次數佔比','近一年環球高息/高收益債券的總成交次數佔比'
                    ,'近一年環球債券的總成交次數佔比','近一年環球新市債的總成交次數佔比','近一年環球新興市場股票的總成交次數佔比'
                    ,'近一年環球新興市場強勢貨幣債券的總成交次數佔比','近一年醫療生技的總成交次數佔比','近一年醫療保健股票的總成交次數佔比'
                    ,'近一年礦業股票的總成交次數佔比','REITs的庫存量','大中華股票的庫存量','中國股票的庫存量','巴西股票的庫存量'
                    ,'日本中小型股票的庫存量','日本股票的庫存量','台灣股票的庫存量','全球平衡的庫存量','全球股票的庫存量','全球債的庫存量'
                    ,'印度股票的庫存量','亞太股票的庫存量','亞太區(除日本)股票的庫存量','亞太區股票的庫存量','亞太區貨幣債的庫存量','拉美股票的庫存量'
                    ,'東南亞股票的庫存量','金融股票 的庫存量','南韓股票的庫存量','科技股票的庫存量','美元高息/高收益債券的庫存量','美國股票的庫存量'
                    ,'美債的庫存量','英國股票的庫存量','香港股票的庫存量','能源股票 的庫存量','高收益債的庫存量','貨幣型的庫存量','黃金的庫存量'
                    ,'新興市場股票的庫存量','新興市場債的庫存量','新興歐洲股票的庫存量','德國股票的庫存量','歐洲中小型股票的庫存量','歐洲股票的庫存量'
                    ,'歐洲新興市場股票的庫存量','環球股票的庫存量','環球高息/高收益債券的庫存量','環球債券的庫存量','環球新市債的庫存量'
                    ,'環球新興市場股票的庫存量','環球新興市場強勢貨幣債券的庫存量','醫療生技的庫存量','醫療保健股票的庫存量','礦業股票的庫存量'
                    ,'REITs的庫存量佔比','大中華股票的庫存量佔比','中國股票的庫存量佔比','巴西股票的庫存量佔比','日本中小型股票的庫存量佔比'
                    ,'日本股票的庫存量佔比','台灣股票的庫存量佔比','全球平衡的庫存量佔比','全球股票的庫存量佔比','全球債的庫存量佔比','印度股票的庫存量佔比'
                    ,'亞太股票的庫存量佔比','亞太區(除日本)股票的庫存量佔比','亞太區股票的庫存量佔比','亞太區貨幣債的庫存量佔比','拉美股票的庫存量佔比'
                    ,'東南亞股票的庫存量佔比','金融股票 的庫存量佔比','南韓股票的庫存量佔比','科技股票的庫存量佔比','美元高息/高收益債券的庫存量佔比'
                    ,'美國股票的庫存量佔比','美債的庫存量佔比','英國股票的庫存量佔比','香港股票的庫存量佔比','能源股票 的庫存量佔比','高收益債的庫存量佔比'
                    ,'貨幣型的庫存量佔比','黃金的庫存量佔比','新興市場股票的庫存量佔比','新興市場債的庫存量佔比','新興歐洲股票的庫存量佔比'
                    ,'德國股票的庫存量佔比','歐洲中小型股票的庫存量佔比','歐洲股票的庫存量佔比','歐洲新興市場股票的庫存量佔比','環球股票的庫存量佔比'
                    ,'環球高息/高收益債券的庫存量佔比','環球債券的庫存量佔比','環球新市債的庫存量佔比','環球新興市場股票的庫存量佔比'
                    ,'環球新興市場強勢貨幣債券的庫存量佔比','醫療生技的庫存量佔比','醫療保健股票的庫存量佔比','礦業股票的庫存量佔比'
]

# 迭代每個客戶，生成特徵摘要和投資建議
for index, row in df.iterrows():
    customer_name = row['ID']
    
    # 根據選擇的欄位來生成客戶特徵
    customer_features = []
    for col in selected_columns:
        if pd.notna(row[col]):  # 檢查該欄位是否有數值
            feature = f"{col}: {row[col]}"
            customer_features.append(feature)
    
    # 更新狀態
    state["customer_features"] = customer_features

    # 執行圖形流程
    result = bot.graph.invoke(state, thread)

    # 檢查生成的投資建議是否為空，如果是空的，給予警告並記錄
    if not result["investment_advice_result"]:
        print(f"警告: {customer_name} 的投資建議生成為空！")

    # 格式化輸出結果
    customer_output = format_output_for_customer(
        customer_name, 
        result["extracted_features"], 
        result["news_summary"],
        result["investment_advice_result"], 
        result["impact_score"]  # 添加影響程度分數
    )
    
    all_customers_output.append(customer_output)

    all_customers_data.append({
        "客戶": customer_name,
        "客戶特徵": result["extracted_features"],
        "新聞摘要": result["news_summary"],
        "投資建議": result["investment_advice_result"],
        "影響程度分數": result["impact_score"]  # 新增的影響程度分數列
    })

# 創建DataFrame並輸出到Excel
output_df = pd.DataFrame(all_customers_data)
with pd.ExcelWriter("Personalized_Investment_Advice_Output.xlsx", engine="openpyxl") as writer:
    output_df.to_excel(writer, sheet_name="Sheet1", index=False)
    worksheet = writer.sheets["Sheet1"]
    
    # 調整欄位寬度
    for i, col in enumerate(output_df.columns):
        max_width = max(output_df[col].astype(str).map(len).max(), len(col)) + 2
        worksheet.column_dimensions[get_column_letter(i + 1)].width = max_width
    
    # 文字換行
    for row in worksheet.iter_rows():
        for cell in row:
            cell.alignment = Alignment(wrap_text=True)

print("Excel 文件已生成並保存，請檢查結果。")
